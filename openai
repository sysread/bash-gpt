#!/usr/bin/env bash

set -eu -o pipefail

# ------------------------------------------------------------------------------
# Global variables
# ------------------------------------------------------------------------------
PROGRAM="${0##*/}"
NOTTY=false

OPENAI_MODEL="${OPENAI_MODEL:-gpt-3.5-turbo-16k}"
API_BASE_URI="https://api.openai.com/v1"
API_VERSION_HEADER="OpenAI-Beta: assistants=v2"

if [ -t 1 ]; then
  # If stdout is a terminal, use a dark theme by default
  GUM_FORMAT_THEME=${GUM_FORMAT_THEME:-dark}
else
  # Otherwise, use a use notty so we don't spew ANSI codes to non-terminals
  GUM_FORMAT_THEME='notty'
  NOTTY=true
fi

# Ensure that subshell commands inherit the theme
export GUM_FORMAT_THEME

# ------------------------------------------------------------------------------
# Functions
# ------------------------------------------------------------------------------
# shellcheck disable=SC2120
usage() {
  local exit_code="${1:-0}"

  gum format -- << EOL
usage: $PROGRAM [OPTIONS]

# Options
  * --help                show help information

# Commands:

## Assistant
  * create-assistant      create a new assistant
  * modify-assistant      modify an existing assistant
  * list-assistants       list assistants
  * get-assistant         get info about an assistant
  * delete-assistant      delete an assistant

## Threads
  * start-thread          start a new thread
  * get-thread            get info about a thread
  * modify-thread         modify a thread
  * delete-thread         delete a thread

## Messages
  * add-message           add a message to a thread
  * modify-message        modify a message in a thread
  * list-messages         list messages in a thread
  * get-message           get info about a message in a thread

## Thread runs
  * run-thread            starts running a thread
  * list-runs             list runs for a thread
  * get-run               get info about a thread's run
  * modify-run            modify a thread's run
  * cancel-run            cancel a thread's run

## Completions
  * get-completion        generate a chat completion (non-streaming)

_Each command has its own set of options. Run '$PROGRAM COMMAND --help' for
more information._

# Environmental variables

  * OPENAI_API_KEY        your OpenAI API key (required; create one at https://platform.openai.com/account/api-keys)
  * OPENAI_MODEL          the model to use; defaults to gpt-3.5-turbo-16k

# See also
  * [API docs](https://platform.openai.com/docs/api-reference/assistants)

EOL

  exit "$exit_code"
}

# ------------------------------------------------------------------------------
# This little work of ba[t]sh[it] craziness was written by ChatGPT, and is
# conclusive proof that garbage in == garbage out.
# ------------------------------------------------------------------------------
cmd-usage() {
  local cmd="$1"
  local options=("${@:2}")
  local collected=('--help' 'show help information')
  local usage

  usage="usage: $PROGRAM $cmd [OPTIONS]

# Options"

  # Check for placeholders and replace them with common options
  for ((i = 0; i < ${#options[@]}; i++)); do
    case "${options[i]}" in
      PAGINATION)
        collected+=('--order' 'asc or desc (by data[].created_at)')
        collected+=('--limit' 'the number of entries to return (default: 20)')
        collected+=('--after' 'a cursor to use for pagination (based on data[].id)')
        collected+=('--before' 'a cursor to use for pagination (based on data[].id)')
        ;;

      MODEL)
        # shellcheck disable=SC2016
        collected+=('--model' 'the model to use (default: $OPENAI_MODEL)')
        ;;

      ASSISTANT)
        collected+=('--assistant' 'the id of the assistant (required)')
        ;;

      THREAD)
        collected+=('--thread' 'the id of the thread (required)')
        ;;

      STREAM)
        collected+=('--stream' 'stream the output')
        ;;

      RUN)
        collected+=('--run' 'the id of the run (required)')
        ;;

      MESSAGE)
        collected+=('--message' 'the id of the message (required)')
        ;;

      INSTRUCTIONS)
        collected+=('--instructions' 'the instructions for the assistant')
        ;;

      NAME)
        collected+=('--name' 'the name of the assistant (required)')
        ;;

      DESCRIPTION)
        collected+=('--description' 'the description of the assistant')
        ;;

      CONTENT)
        collected+=('--content' 'the message to add (required)')
        ;;

      'META[]')
        collected+=('--meta' 'the metadata to include; up to 16 key/value pairs are permitted (e.g. --meta key1=value1 --meta key2=value2)')
        ;;

      *)
        collected+=("${options[i]}")
        ;;
    esac
  done

  while IFS= read -r line; do
    # Replace non-breaking spaces back to normal spaces
    line="${line//$'\u00A0'/ }"
    usage+=$'\n'"$line"
  done < <(
    for ((i = 0; i < ${#collected[@]}; i += 2)); do
      # Replace spaces in explanations with non-breaking spaces
      local explanation=${collected[i + 1]// /$'\u00A0'}
      printf "  * %s\t%s\n" "${collected[i]}" "$explanation"
    done | column -t
  )

  printf '%s\n' "$usage" | gum format
  exit 0
}

wants-help() {
  if get-flag --help "$@"; then
    return 0
  fi

  if get-flag -h "$@"; then
    return 0
  fi

  return 1
}

info() {
  gum style --foreground="#00FF00" "$PROGRAM: $*" >&2
}

warn() {
  local msg="${1:-something went wrong}"
  gum style --foreground="#FF0000" "$PROGRAM: $msg" >&2
}

die() {
  warn "$@"
  exit 1
}

validate-env() {
  local tools=("curl" "jq" "gum")
  local cmd

  for cmd in "${tools[@]}"; do
    if ! command -v "$cmd" &> /dev/null; then
      echo "$cmd is not installed" >&2
      exit 1
    fi
  done

  if [ -z "${OPENAI_API_KEY:-}" ]; then
    die "OPENAI_API_KEY is not set in the environment"
  elif [[ "$OPENAI_API_KEY" =~ ^sk-[a-zA-Z0-9]{32,64}$ ]]; then
    warn "Warning: You are using a legacy OPENAI_API_KEY. Please update soon!"
  elif [[ ! "$OPENAI_API_KEY" =~ ^sk-[a-zA-Z0-9]+-[a-zA-Z0-9]{32,64}$ ]]; then
    die "OPENAI_API_KEY is not a valid key"
  fi

  return 0
}

# ------------------------------------------------------------------------------
# if get-flag --flag "$@"; then
#   ...
# fi
# ------------------------------------------------------------------------------
get-flag() {
  local flag="$1"

  for param in "${@:2}"; do
    if [[ "$param" == "$flag" ]]; then
      return 0
    fi
  done

  return 1
}

# ------------------------------------------------------------------------------
# flag_value=$(get-config --flag "$@") || die "missing --flag"
# ------------------------------------------------------------------------------
get-config() {
  local name="$1"
  local capture=false
  local param

  for param in "${@:2}"; do
    if [[ "$capture" == true ]]; then
      echo "$param"
      return 0
    elif [[ "$param" == "$name" ]]; then
      capture=true
    fi
  done

  return 1
}

# ------------------------------------------------------------------------------
# declare -a flag_values
# get-config-multi --flag flag_values "$@" || die "missing --flag"
# ------------------------------------------------------------------------------
get-config-multi() {
  local name="$1"
  local -n return_var="$2"
  local param
  local capture_next=false

  return_var=() # Clear the array to store results

  for param in "${@:3}"; do
    if [[ "$capture_next" == true ]]; then
      return_var+=("$param")
      capture_next=false
      continue
    fi

    if [[ "$param" == "$name" ]]; then
      capture_next=true
    elif [[ "$param" =~ ^$name=.+ ]]; then
      return_var+=("${param#*=}")
    fi
  done

  [[ ${#return_var[@]} -eq 0 ]] && return 1
}

request() {
  local args=("$@")
  local response

  response=$(
    curl -s \
      "${args[@]}" \
      -H "Authorization: Bearer $OPENAI_API_KEY" \
      -H "Content-Type: application/json" \
      -H "$API_VERSION_HEADER"
  ) || die "API connection error"

  response-ok "$response"

  if [ "$NOTTY" = true ]; then
    echo "$response"
  else
    jq <<< "$response"
  fi
}

stream-request() {
  local args=("$@")
  local response=""
  local event=""

  curl -sN \
    "${args[@]}" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -H "Content-Type: application/json" \
    -H "OpenAI-Beta: assistants=v2" \
    | while IFS= read -r line; do
      if [[ "$line" == "event: "* ]]; then
        event=${line#event: }
        continue
      elif [[ "$event" == "thread.message.delta" ]] && [[ "$line" == "data: "* ]]; then
        jq -rj '.delta.content[].text.value' <<< "${line#data: }"
      fi
    done
}

response-ok() {
  if jq -e 'has("error")' <<< "$1" > /dev/null; then
    die "$(echo "$1" | jq -r '.error.message')"
  fi

  return 0
}

payload-meta() {
  local -n payload_var="$1"
  shift

  declare -a metas
  get-config-multi --meta metas "$@" || true

  if [[ ${#metas[@]} -gt 0 ]]; then
    metadata=$(printf '%s\n' "${metas[@]}" | jq -R 'split("=") | {(.[0]): .[1]}' | jq -s 'add')
    payload_var=$(jq --argjson metadata "$metadata" '. + {metadata: $metadata}' <<< "$payload_var")
  fi
}

build-paginated-uri() {
  local endpoint="$1"
  shift

  order=$(get-config --order "$@") || true
  limit=$(get-config --limit "$@") || true
  after=$(get-config --after "$@") || true
  before=$(get-config --before "$@") || true

  query=""

  if [ -n "$order" ]; then
    query="$query&order=$order"
  fi

  if [ -n "$limit" ]; then
    query="$query&limit=$limit"
  fi

  if [ -n "$after" ]; then
    query="$query&after=$after"
  fi

  if [ -n "$before" ]; then
    query="$query&before=$before"
  fi

  if [ -n "$query" ]; then
    echo "$endpoint?$query"
  else
    echo "$endpoint"
  fi
}

# ------------------------------------------------------------------------------
# Commands
# ------------------------------------------------------------------------------
cmd:create-assistant() {
  local name
  local instructions
  local description
  local model
  local payload

  if wants-help "$@" || [ -z "$*" ]; then
    cmd-usage 'create-assistant' 'NAME' 'DESCRIPTION' 'INSTRUCTIONS' 'MODEL' 'META[]'
  fi

  name=$(get-config --name "$@") || die "create-assistant: expected --name"
  instructions=$(get-config --instructions "$@") || die "create-assistant: expected --instructions"
  description=$(get-config --description "$@") || true
  model=$(get-config --model "$@") || true

  if [ -z "$model" ]; then
    model="$OPENAI_MODEL"
  fi

  payload=$(jq -n '{}')
  payload=$(jq --arg x "$model" '. + {"model": $x}' <<< "$payload")
  payload=$(jq --arg x "$name" '. + {"name": $x}' <<< "$payload")
  payload=$(jq --arg x "$instructions" '. + {"instructions": $x}' <<< "$payload")
  payload-meta payload "$@"

  if [ -n "$description" ]; then
    payload=$(jq --arg x "$description" '. + {"description": $x}' <<< "$payload")
  fi

  request "$API_BASE_URI/assistants" -d "$payload"
}

cmd:modify-assistant() {
  local assistant
  local name
  local instructions
  local description
  local model
  local payload

  if wants-help "$@" || [ -z "$*" ]; then
    cmd-usage 'modify-assistant' 'ASSISTANT' 'NAME' 'DESCRIPTION' 'INSTRUCTIONS' 'MODEL' 'META[]'
  fi

  assistant=$(get-config --assistant "$@") || die "modify-assistant: expected --assistant"
  name=$(get-config --name "$@") || true
  instructions=$(get-config --instructions "$@") || true
  description=$(get-config --description "$@") || true
  model=$(get-config --model "$@") || true

  if [ -z "$model" ]; then
    model="$OPENAI_MODEL"
  fi

  payload=$(jq -n '{}')
  payload-meta payload "$@"

  if [ -n "$model" ]; then
    payload=$(jq --arg x "$model" '. + {"model": $x}' <<< "$payload")
  fi

  if [ -n "$name" ]; then
    payload=$(jq --arg x "$name" '. + {"name": $x}' <<< "$payload")
  fi

  if [ -n "$instructions" ]; then
    payload=$(jq --arg x "$instructions" '. + {"instructions": $x}' <<< "$payload")
  fi

  if [ -n "$description" ]; then
    payload=$(jq --arg x "$description" '. + {"description": $x}' <<< "$payload")
  fi

  request "$API_BASE_URI/assistants/$assistant" -d "$payload"
}

cmd:get-assistant() {
  local assistant

  if wants-help "$@" || [ -z "$*" ]; then
    cmd-usage 'get-assistant' 'ASSISTANT'
  fi

  assistant=$(get-config --assistant "$@") || die "get-assistant: expected --assistant"

  request "$API_BASE_URI/assistants/$assistant"
}

cmd:list-assistants() {
  local order
  local limit
  local after
  local before
  local query
  local endpoint

  if wants-help "$@"; then
    cmd-usage 'list-assistants' 'PAGINATION'
  fi

  endpoint=$(build-paginated-uri "$API_BASE_URI/assistants" "$@")
  request "$endpoint"
}

cmd:delete-assistant() {
  local assistant

  if wants-help "$@" || [ -z "$*" ]; then
    cmd-usage 'delete-assistant' 'ASSISTANT'
  fi

  assistant=$(get-config --assistant "$@") || die "delete-assistant: expected --assistant"
  request "$API_BASE_URI/assistants/$assistant" -X DELETE
}

cmd:start-thread() {
  local payload

  if wants-help "$@"; then
    cmd-usage 'start-thread' 'META[]'
  fi

  payload=$(jq -n '{}')
  payload-meta payload "$@"

  request "$API_BASE_URI/threads" -d "$payload"
}

cmd:modify-thread() {
  local thread
  local payload

  if wants-help "$@" || [ -z "$*" ]; then
    cmd-usage 'modify-thread' 'THREAD' 'META[]'
  fi

  thread=$(get-config --thread "$@") || die "modify-thread: expected --thread"

  payload=$(jq -n '{}')
  payload-meta payload "$@"

  request "$API_BASE_URI/threads/$thread" -d "$payload"
}

cmd:delete-thread() {
  local thread

  if wants-help "$@" || [ -z "$*" ]; then
    cmd-usage 'delete-thread' 'THREAD'
  fi

  thread=$(get-config --thread "$@") || die "delete-assistant: expected --thread"

  request "$API_BASE_URI/threads/$thread" -X DELETE
}

cmd:get-thread() {
  local thread

  if wants-help "$@" || [ -z "$*" ]; then
    cmd-usage 'get-thread' 'THREAD'
  fi

  thread=$(get-config --thread "$@") || die "delete-assistant: expected --thread"

  request "$API_BASE_URI/threads/$thread"
}

cmd:add-message() {
  local thread
  local content
  local payload

  if wants-help "$@" || [ -z "$*" ]; then
    cmd-usage 'add-message' 'THREAD' 'CONTENT'
  fi

  thread=$(get-config --thread "$@") || die "add-message: expected --thread"
  content=$(get-config --content "$@") || die "add-message: expected --content"

  [ -z "$content" ] && die "add-message: Content is empty, cannot send."

  payload=$(jq -n '{"role": "user"}')
  payload=$(jq --arg x "$content" '. + {"content": $x}' <<< "$payload")

  request "$API_BASE_URI/threads/$thread/messages" -d "$payload"
}

cmd:modify-message() {
  local thread
  local message
  local payload

  if wants-help "$@" || [ -z "$*" ]; then
    cmd-usage 'modify-message' 'THREAD' 'MESSAGE' 'META[]'
  fi

  thread=$(get-config --thread "$@") || die "modify-message: expected --thread"
  message=$(get-config --message "$@") || die "modify-message: expected --message"

  payload=$(jq -n '{}')
  payload-meta payload "$@"

  request "$API_BASE_URI/threads/$thread/messages/$message" -d "$payload"
}

cmd:get-message() {
  local thread
  local message

  if wants-help "$@" || [ -z "$*" ]; then
    cmd-usage 'get-message' 'THREAD' 'MESSAGE'
  fi

  thread=$(get-config --thread "$@") || die "get-message: expected --thread"
  message=$(get-config --message "$@") || die "get-message: expected --message"

  request "$API_BASE_URI/threads/$thread/messages/$message"
}

cmd:list-messages() {
  local thread
  local order
  local limit
  local after
  local before

  if wants-help "$@" || [ -z "$*" ]; then
    cmd-usage 'list-messages' 'PAGINATION' 'THREAD'
  fi

  thread=$(get-config --thread "$@") || die "add-message: expected --thread"
  endpoint=$(build-paginated-uri "$API_BASE_URI/threads/$thread/messages" "$@")

  request "$endpoint"
}

cmd:run-thread() {
  local assistant
  local thread

  if wants-help "$@" || [ -z "$*" ]; then
    cmd-usage 'run-thread' 'ASSISTANT' 'THREAD' 'STREAM'
  fi

  assistant=$(get-config --assistant "$@") || die "run-thread: expected --assistant"
  thread=$(get-config --thread "$@") || die "run-thread: expected --thread"

  if get-flag --stream "$@"; then
    stream-request "$API_BASE_URI/threads/$thread/runs" \
      -d "{\"assistant_id\": \"$assistant\", \"stream\": true}"
  else
    request "$API_BASE_URI/threads/$thread/runs" \
      -d "{\"assistant_id\": \"$assistant\"}"
  fi
}

cmd:list-runs() {
  local thread

  if wants-help "$@" || [ -z "$*" ]; then
    cmd-usage 'list-runs' 'THREAD'
  fi

  thread=$(get-config --thread "$@") || die "list-runs: expected --thread"
  request "$API_BASE_URI/threads/$thread/runs"
}

cmd:get-run() {
  local thread
  local run

  if wants-help "$@" || [ -z "$*" ]; then
    cmd-usage 'get-run' 'THREAD' 'RUN'
  fi

  thread=$(get-config --thread "$@") || die "get-run: expected --thread"
  run=$(get-config --run "$@") || die "get-run: expected --run"

  request "$API_BASE_URI/threads/$thread/runs/$run"
}

cmd:modify-run() {
  local thread
  local run
  local payload

  if wants-help "$@" || [ -z "$*" ]; then
    cmd-usage 'modify-run' 'THREAD' 'RUN' 'META[]'
  fi

  thread=$(get-config --thread "$@") || die "get-run: expected --thread"
  run=$(get-config --run "$@") || die "get-run: expected --run"

  payload=$(jq -n '{}')
  payload-meta payload "$@"

  request "$API_BASE_URI/threads/$thread/runs/$run" -d "$payload"
}

cmd:cancel-run() {
  local thread
  local run

  if wants-help "$@" || [ -z "$*" ]; then
    cmd-usage 'cancel-run' 'THREAD' 'RUN'
  fi

  thread=$(get-config --thread "$@") || die "cancel-run: expected --thread"
  run=$(get-config --run "$@") || die "cancel-run: expected --run"

  request "$API_BASE_URI/threads/$thread/runs/$run/cancel" -X POST
}

cmd:get-completion() {
  local model
  local system
  local prompt
  local messages
  local payload

  if wants-help "$@" || [ -z "$*" ]; then
    cmd-usage 'get-completion' 'MODEL' \
      '--system' 'the system "role" to use (e.g. "You are a helpful assistant.")' \
      '--prompt' 'the prompt to use (required)'
  fi

  model=$(get-config --model "$@") || true
  system=$(get-config --system "$@") || true
  prompt=$(get-config --prompt "$@") || die "get-completion: expected --prompt"

  if [ -z "$model" ]; then
    model="$OPENAI_MODEL"
  fi

  messages=$(jq -n '[]')
  messages=$(jq --arg x "$system" '. + [{"role": "system", "content": $x}]' <<< "$messages")
  messages=$(jq --arg x "$prompt" '. + [{"role": "user", "content": $x}]' <<< "$messages")

  payload=$(jq -n '{}')
  payload=$(jq --arg x "$model" '. + {"model": $x}' <<< "$payload")
  payload=$(jq --argjson x "$messages" '. + {"messages": $x}' <<< "$payload")

  request "$API_BASE_URI/chat/completions" -d "$payload"
}

main() {
  local options

  validate-env

  if [ "$#" -eq 0 ]; then
    usage 1
  fi

  options=$(declare -F | grep '^declare -f cmd:' | cut -d ' ' -f 3)

  for option in $options; do
    flag=${option#cmd:}

    if get-flag "$flag" "$@"; then
      "$option" "${@:2}"
      exit 0
    fi
  done

  if wants-help "$@"; then
    usage 0
  fi
}

main "$@"
